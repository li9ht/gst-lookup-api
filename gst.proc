var casper = require('casper').create({
      verbose: true,
      logLevel: 'error',
      waitTimeout: 3000,
      pageSettings: {
        loadImages: false,
        loadPlugins: false,
        userAgent: 'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.2 Safari/537.36'
      }
    }), input_radio_selector, input_text_selector, results = [];

if (casper.cli.args.length === 0) {
    casper.echo('No arguments passed').exit();
}

switch(casper.cli.get(0))
{
  case 'gst_no':
    input_radio_selector = '#d-3';
    input_text_selector = '#d-5';
    break;
  case 'reg_no':
    input_radio_selector = '#d-6';
    input_text_selector = '#d-7';
    break;
  case 'name':
  default:
    input_radio_selector = '#d-8';
    input_text_selector = '#d-9';
    break;
}

function padDigits(number, digits) {
    return Array(Math.max(digits - String(number).length + 1, 0)).join(0) + number;
}

casper.start('https://gst.customs.gov.my/TAP/_/#1', function() {

  this.waitForSelector('#cl_b-i', function() {
    // click Lookup GST Status label
    this.click('#cl_b-i');
    this.waitForSelector(input_radio_selector, function() {
      // choose radio category and keyin input
      this.click(input_radio_selector);
      this.sendKeys(input_text_selector, 
        // casper cli convert the gst_no to int removing zero prefix, so we append back the zeros assuming gst_no has 12 digits
        typeof casper.cli.get(1) === 'number' ? padDigits(casper.cli.get(1), 12) : casper.cli.get(1))
        .sendKeys(input_text_selector, this.page.event.key.Enter , {keepFocus: true});
      // get results
      this.waitUntilVisible('table#d-f', function() {

        results = this.evaluate(function() {

          var rows = document.querySelectorAll('table#d-f tbody tr.DataRow');
          return Array.prototype.map.call(rows, function(row) {

            var cells = row.querySelectorAll('td');
            return {
              gst_no: cells[0].innerText.trim(),
              taxpayer_name: cells[1].innerText.trim(),
              commence_date: cells[2].innerText.trim(),
              status: cells[3].innerText.trim()
            };
          });
        });
        //require('utils').dump(results);
        this.echo(JSON.stringify({results: results}));

      // on failed results
      }, function() {
        
        this.waitUntilVisible('#container_d-l', function() {
          this.echo(JSON.stringify({
            error: this.evaluate(function() {
              return document.querySelector('#container_d-l').innerText.trim()
            })
          }));

        // other error
        }, function() {

          this.waitUntilVisible('#container_d-i', function() {
            this.echo(JSON.stringify({
              error: this.evaluate(function() {
                return document.querySelector('#container_d-i').innerText.trim()
              })
            }));
          });

        });

      }); // end waitForSelector('table#d-f')

    }); // end waitForSelector(input_radio_selector)

  }); // end waitForSelector('#cl_b-i')

}); // end casper.create

/* debug */

casper.on('error', function(msg,backtrace) {
  this.echo("=========================");
  this.echo("ERROR:");
  this.echo(msg);
  this.echo(backtrace);
  this.echo("=========================");
});
 
casper.on("page.error", function(msg, backtrace) {
  this.echo("=========================");
  this.echo("PAGE.ERROR:");
  this.echo(msg);
  this.echo(backtrace);
  this.echo("=========================");
});

casper.on("resource.error", function(resourceError){
  console.log('Unable to load resource (#' + resourceError.id + 'URL:' + resourceError.url + ')');
  console.log('Error code: ' + resourceError.errorCode + '. Description: ' + resourceError.errorString);
});

/* end debug */

casper.run(function() {
  this.exit();
});